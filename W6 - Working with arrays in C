#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdbool.h>
#include <math.h>

#define SIZE 5

//methods
void fillRandArray(int array[], int size);
void printArray(const int array[], int size);
void sortArray(int array[], int size);
int searchArray(const int value, int array[], int size);




int main() {
    srand(time(NULL));
    int elements[50];
    int input; 

    fillRandArray(elements, SIZE);
    printArray(elements, SIZE);
    printf("\n");
    sortArray(elements, SIZE);
    printArray(elements,SIZE);
    
    //user input
    printf("\nEnter the value youre searching for: ");
    scanf("%d", &input);
    printf("Closest value is: %d",  searchArray(input, elements, SIZE));

return 0;
}

void fillRandArray(int array[], int size){
    int max = 99;
    int min=0;
    for (int i = 0; i < size; i++)
    {
        array[i]= rand()%(max-min+1)+min;
    }
    
}
void printArray(const int array[], int size){

    printf("Index: ");
    for (int i = 0; i < size; i++)
    {
        printf("%2d\t", i);
    }
    printf("\nValues: ");
    for (int i = 0; i < size; i++)
    {
        printf("%2d\t", array[i]);
    }
    

}
void sortArray(int array[], int size){
    bool sorted = false;
    for (int i = 0; i < size-1 && !sorted; i++)
    {
         sorted=true;
        for (int j = 0;j < size-1-i; j++)
        {
            if (array[j] > array[j+1]){
                //swap
                sorted=false;
                int temp = array[j];
                array[j]= array[j+1];
                array[j+1]= temp;
            }
        }   
        
    }
    
}

int searchArray(const int value, int array[], int size){
    sortArray(array, size);
    int foundIndex=-1;
    int start= 0;
    int end= size -1;
    bool found =false; 
    while (start<=end&& !found)
    {
        int mid = (start+end)/2;
        //if value lies to the left of the middle 
        if (value ==array[mid])
        {
            return array[mid];
        }
         else if (value<array[mid])   
        {
            end = mid-1;
        }else {
            start = mid+1;
        }
        
    }
    if (abs(value - array[start])<abs(value-array[end]))
    {
        // printf("start value: %d\nend value: %d\n val + start diff: ", array[start], array[end], fabs(value-start));
        return array[start];
    }else{
        // printf("start value: %d\nend value: %d\n val + end diff: ", array[start], array[end], fabs(value-end));
        return array[end];
    }

    /*or return the index
    return start;
    return end;
    printf("Closest value is at index %d with a value of %d", searchArray(...), elements[searchArray(...)]) */
    
}
